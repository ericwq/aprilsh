# .github/workflows/release.yaml
name: new release

on:
  push:
    tags:
      - "*" # triggers only if push new tag version, like `0.8.4` or else

env:
  PROJECT: aprilsh
  BIN_DIR: bin

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-22.04,   target: linux,   platform: linux-x64,   container: 'alpine:latest', libc: musl }
          # - { os: ubuntu-20.04,   target: linux,   platform: linux-x64,   container: 'ubuntu:18.04' }
          # - { os: ubuntu-20.04,   target: linux,   platform: linux-arm64, container: 'ubuntu:18.04' }
          # - { os: macos-11,       target: darwin,  platform: darwin-x64   }
          # - { os: macos-11,       target: darwin,  platform: darwin-arm64 }
          # - { os: windows-latest, target: windows, platform: win32-ia32   }
          # - { os: windows-latest, target: windows, platform: win32-x64    }
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    steps:
      - name: prepare alpine container
        if: ${{ matrix.target == 'linux' && matrix.libc == 'musl' }}
        run: |
          apk update
          apk add git bash

      - name: checkout
        uses: actions/checkout@master

      # - name: Set up Go
      #   uses: actions/setup-go@master
      #   with:
      #     go-version: 1.21

      # - name: setting up workflow variables
      #   id: vars
      #   shell: bash
      #   run: |
      #     # Package version
      #     if [[ $GITHUB_REF = refs/tags/* ]]; then
      #       PKG_VERSION=${GITHUB_REF##*/}
      #     else
      #       PKG_VERSION=${GITHUB_SHA:0:7}
      #     fi
      #
      #     # Package suffix relative to the platform
      #     if [[ "${{ matrix.target }}" = windows ]]; then
      #       PKG_SUFFIX="zip"
      #     else
      #       PKG_SUFFIX="tar.gz"
      #     fi
      #
      #     # Package name w/ version
      #     PKG_BASENAME="${{ env.PROJECT }}-${PKG_VERSION}-${{ matrix.platform }}"
      #     if [[ "${{ matrix.libc }}" = musl ]]; then
      #       PKG_BASENAME="${PKG_BASENAME}-${{matrix.libc}}"
      #     fi
      #
      #     # Full name of the tarball asset
      #     PKG_NAME="${PKG_BASENAME}.${PKG_SUFFIX}"
      #
      #     # Staging area for tarballs
      #     PKG_STAGING="ci_staging/$PKG_BASENAME"
      #
      #     echo PKG_VERSION=${PKG_VERSION}             >> $GITHUB_OUTPUT
      #     echo PKG_BASENAME=${PKG_BASENAME}           >> $GITHUB_OUTPUT
      #     echo PKG_NAME=${PKG_NAME}                   >> $GITHUB_OUTPUT
      #     echo PKG_PATH="${PKG_STAGING}/${PKG_NAME}"  >> $GITHUB_OUTPUT
      #     echo PKG_STAGING=${PKG_STAGING}             >> $GITHUB_OUTPUT
      #
      - name: collect build info
        id: collect
        shell: bash
        run: |
          git config --global --add safe.directory /__w/aprilsh/aprilsh
          sed -i -e "s/.*_GitVersion=.*/_GitVersion=`git describe --tags`/g" -- "./build/APKBUILD"
          sed -i -e "s/.*_GitCommit=.*/_GitCommit=`git rev-parse HEAD`/g" -- "./build/APKBUILD"
          sed -i -e "s/.*_GitBranch=.*/_GitBranch=`git rev-parse --abbrev-ref HEAD`/g" -- "./build/APKBUILD"
          # echo "*****"
          # git diff
          # echo "*****"
          #
          # head -n 21 "./build/APKBUILD"
          # mkdir -p ${{ steps.vars.outputs.PKG_STAGING }}
          # tar cvzf ${{ steps.vars.outputs.PKG_PATH }} \
          #   build.info \
          #   LICENSE \
          #   README.md \
          #   data \
          #   doc \
          #   encrypt \
          #   frontend \
          #   go.mod \
          #   go.sum \
          #   img \
          #   network \
          #   protobufs \
          #   statesync \
          #   terminal \
          #   util

      - name: Commit files # transfer the new html files back into the repository
        run: |
          git config --local user.name "github-actions[bot]"
          git commit -a -m "Add changes"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true

      - name: publish release assets
        uses: softprops/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ${{ steps.vars.outputs.PKG_PATH }}
